import: apidocs.yml


url:
  front: http://localhost:3000
  base: http://localhost:8081
  ngrok: https://lizard-fair-cougar.ngrok-free.app
  path:
    login: login
    signup: signup
server:
  port: 8081
front-server:
  url: http://verdict-gg.vercel.app

spring:
  config:
    import: optional:file:src/main/resources/local.env[.properties]
  data:
    redis:
      host: ${REDIS_HOST}
      password: ${REDIS_PASSWORD}
      database: ${REDIS_DATABASE}
      port: 6379
  flyway:
    default-schema: verdict
    locations: classpath:resources/db/migration
    enabled: true
    baseline-on-migrate: true
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${LOCAL_DB_USERNAME}
    password: ${LOCAL_DB_PASSWORD}
    url: ${LOCAL_DB_URL}
  jpa:
    properties:
      hibernate:
        format_sql: true
        show_sql: true
    hibernate:
      ddl-auto: validate # create, create-drop, update, validate, none
  security:
    oauth2:
      client:
        registration:
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            authorization-grant-type: authorization_code # 코드로 코큰 부여
            scope:
              - email
              - name
              - profile_image
            redirect-uri: "http://localhost:8081/login/oauth2/code/naver"
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
              - openid
            redirect-uri: "http://localhost:8081/login/oauth2/code/google"
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
  cloud:
    aws:
      credentials:
        access-key: ${AWS_ACCESS_KEY_ID}
        secret-key: ${AWS_SECRET_ACCESS_KEY}
      region:
        static: ${AWS_REGION}
      s3:
        bucket: ${AWS_S3_BUCKET}
jwt:
  access-secret: ${JWT_ACCESS_SECRET}
  refresh-secret: ${JWT_REFRESH_SECRET}
  access-expiration: 3600000
  refresh-expiration: 1209600000
